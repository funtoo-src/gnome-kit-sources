diff -Nuar upower-0.99.3/src/linux/up-device-supply.c upower-0.99.3-fixed/src/linux/up-device-supply.c
--- upower-0.99.3/src/linux/up-device-supply.c	2018-11-30 20:37:23.538547758 +0000
+++ upower-0.99.3-fixed/src/linux/up-device-supply.c	2018-11-30 21:03:47.098454927 +0000
@@ -49,6 +49,12 @@
 /* number of old energy values to keep cached */
 #define UP_DEVICE_SUPPLY_ENERGY_OLD_LENGTH		4
 
+typedef enum {
+	REFRESH_RESULT_FAILURE = 0,
+	REFRESH_RESULT_SUCCESS = 1,
+	REFRESH_RESULT_NO_DATA
+} RefreshResult;
+
 struct UpDeviceSupplyPrivate
 {
 	guint			 poll_timer_id;
@@ -69,12 +75,7 @@
 
 static gboolean		 up_device_supply_refresh	 	(UpDevice *device);
 
-/**
- * up_device_supply_refresh_line_power:
- *
- * Return %TRUE on success, %FALSE if we failed to refresh or no data
- **/
-static gboolean
+static RefreshResult
 up_device_supply_refresh_line_power (UpDeviceSupply *supply)
 {
 	UpDevice *device = UP_DEVICE (supply);
@@ -91,7 +92,7 @@
 	native_path = g_udev_device_get_sysfs_path (native);
 	g_object_set (device, "online", sysfs_get_int (native_path, "online"), NULL);
 
-	return TRUE;
+	return REFRESH_RESULT_SUCCESS;
 }
 
 /**
@@ -506,17 +507,11 @@
 	return ret;
 }
 
-/**
- * up_device_supply_refresh_battery:
- *
- * Return %TRUE on success, %FALSE if we failed to refresh or no data
- **/
-static gboolean
+static RefreshResult
 up_device_supply_refresh_battery (UpDeviceSupply *supply,
 				  UpDeviceState  *out_state)
 {
 	gchar *technology_native = NULL;
-	gboolean ret = TRUE;
 	gdouble voltage_design;
 	UpDeviceState old_state;
 	UpDeviceState state;
@@ -835,19 +830,13 @@
 	g_free (manufacturer);
 	g_free (model_name);
 	g_free (serial_number);
-	return ret;
+	return REFRESH_RESULT_SUCCESS;
 }
 
-/**
- * up_device_supply_refresh_device:
- *
- * Return %TRUE on success, %FALSE if we failed to refresh or no data
- **/
-static gboolean
+static RefreshResult
 up_device_supply_refresh_device (UpDeviceSupply *supply,
 				 UpDeviceState  *out_state)
 {
-	gboolean ret = TRUE;
 	UpDeviceState state;
 	UpDevice *device = UP_DEVICE (supply);
 	const gchar *native_path;
@@ -896,7 +885,7 @@
 		state = UP_DEVICE_STATE_UNKNOWN;
 		g_object_set (device, "state", state, NULL);
 		*out_state = state;
-		return FALSE;
+		return REFRESH_RESULT_NO_DATA;
 	}
 
 	state = up_device_supply_get_state (native_path);
@@ -919,7 +908,7 @@
 
 	*out_state = state;
 
-	return ret;
+	return REFRESH_RESULT_SUCCESS;
 }
 
 static gboolean
@@ -1045,6 +1034,7 @@
 	const gchar *native_path;
 	const gchar *scope;
 	UpDeviceKind type;
+	RefreshResult ret;
 
 	up_device_supply_reset_values (supply);
 
@@ -1099,7 +1089,8 @@
 		up_daemon_start_poll (G_OBJECT (device), (GSourceFunc) up_device_supply_refresh);
 
 	/* coldplug values */
-	return up_device_supply_refresh (device);
+	ret = up_device_supply_refresh (device);
+	return (ret != REFRESH_RESULT_FAILURE);
 }
 
 /**
@@ -1138,15 +1129,10 @@
 	}
 }
 
-/**
- * up_device_supply_refresh:
- *
- * Return %TRUE on success, %FALSE if we failed to refresh or no data
- **/
 static gboolean
 up_device_supply_refresh (UpDevice *device)
 {
-	gboolean ret;
+	RefreshResult ret;
 	UpDeviceSupply *supply = UP_DEVICE_SUPPLY (device);
 	UpDeviceKind type;
 	UpDeviceState state;
@@ -1167,10 +1153,10 @@
 	}
 
 	/* reset time if we got new data */
-	if (ret)
+	if (ret == REFRESH_RESULT_SUCCESS)
 		g_object_set (device, "update-time", (guint64) g_get_real_time () / G_USEC_PER_SEC, NULL);
 
-	return ret;
+	return (ret != REFRESH_RESULT_FAILURE);
 }
 
 /**

